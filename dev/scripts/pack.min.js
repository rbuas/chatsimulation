ChatApp=function($,angular){function trim(text){return text&&text.replace(/^\s+|\s+$/g,"")}var chatapp=angular.module("ChatApp",["ngRoute","ngResource","ngCookies"]);return chatapp.state={loggedUser:"",common:{},ready:!1,users:[],history:[]},chatapp.broadcast=function(event,data){var self=this;self.root&&self.state.ready&&self.root.$broadcast(event,data)},chatapp.request=function(path,data){var self=this;return self.res({method:"get",url:path,data:data,headers:{"Content-Type":"application/vnd.api+json"}})},chatapp.connect=function(){var self=this;self.updateFromDB(),self.request("/common.json").then(function(response){response&&response.data?(self.state.ready=!0,self.state.common=response.data,self.broadcast("common",response.data)):console.log("ERROR_COMMUNICATION")}),self.pulling=self.interval(function(){return self.broadcastUpdates()},2e3)},chatapp.deconnect=function(){var self=this;if(self.pulling&&self.interval.cancel(self.pulling),self.hasLoggedUser()){self.updateFromDB();var userIndex=self.state.users.indexOf(self.state.loggedUser);userIndex<0||(self.state.users.splice(userIndex,1),self.updateDB())}},chatapp.common=function(key){var self=this;return self.state.common&&self.state.common[key]||key},chatapp.broadcastUpdates=function(sameInstanceCall){var self=this,oldUserCount=self.state.users.length,oldHistoryCount=self.state.history.length;sameInstanceCall||self.updateFromDB();var userCount=self.state.users.length,historyCount=self.state.history.length;(sameInstanceCall||oldHistoryCount!=historyCount)&&self.broadcast("history",self.state.history),(sameInstanceCall||oldUserCount!=userCount)&&self.broadcast("users",self.state.users)},chatapp.updateFromDB=function(){var self=this;self.state.users=self.db.getObject("ca-users")||[],self.state.history=self.db.getObject("ca-history")||[]},chatapp.updateDB=function(senddata){var self=this;self.db.putObject("ca-users",self.state.users),self.db.putObject("ca-history",self.state.history)},chatapp.register=function(nickname){var self=this;return trim(nickname)?self.state.loggedUser?"Instance with registered user, please open another window to chat with a new user.":self.state.loggedUser==nickname?"You are already logged. What do you do here ?":self.state.users.indexOf(nickname)>=0?"There is already a user connected with this nickname, please try again with another nickname.":(self.state.loggedUser=nickname,self.updateFromDB(),self.state.users.push(nickname),self.updateDB(),void self.broadcastUpdates(!0)):"Invalid nickname, please try another one."},chatapp.hasLoggedUser=function(){var self=this;return!!self.state.loggedUser},chatapp.sendMessage=function(message){var self=this;if(!trim(message))return"Invalid message, please write a valid message.";if(!self.hasLoggedUser())return"I'm sorry, I cant delivery your message, please try again.";var date=new Date,dateString=date.toISOString(),entry={s:self.state.loggedUser,d:dateString,m:message};self.updateFromDB(),self.state.history.push(entry),self.updateDB(),self.broadcastUpdates(!0)},chatapp.start=function(){var self=this;self.config(["$routeProvider","$locationProvider",function($routeProvider,$locationProvider){$routeProvider.when("/",{templateUrl:"views/chatapp.html",controller:"ChatAppController",controllerAs:"cac"}).otherwise({redirectTo:"/"})}]),self.run(["$rootScope","$http","$cookies","$window","$interval",function($rootScope,$http,$cookies,$window,$interval){self.root=$rootScope,self.db=$cookies,self.res=$http,self.interval=$interval,self.state.ready=!1,self.connect(),$window.addEventListener("beforeunload",function(){return self.deconnect()})}])},chatapp.start(),chatapp.controller("ChatAppController",["$scope","$http","$location","$interval",function($scope,$http,$location,$interval){var cac=this;cac.initialize=function(){cac.registerError="",cac.newMessage="",cac.messageError="",cac.updateState()},cac.I=function(key){return chartapp.coomon(key)},cac.register=function(){cac.registerError=chatapp.register(cac.userNickname),cac.updateUserState()},cac.updateState=function(){cac.updateCommon(),cac.updateHistory(),cac.updateUserState()},cac.updateCommon=function(e,common){cac.ready=chatapp.state.ready},cac.updateUserState=function(){cac.loggedUser=chatapp.state.loggedUser,cac.hasUser=chatapp.hasLoggedUser(),cac.updateUsers(null,chatapp.state.users)},cac.updateUsers=function(e,users){cac.users=users},cac.sendMessage=function(){var error=chatapp.sendMessage(cac.newMessage);return error?void(cac.messageError=error):(cac.messageError="",void(cac.newMessage=""))},cac.updateHistory=function(e,history){cac.history=Object.assign({},history)},$scope.$on("common",cac.updateCommon),$scope.$on("history",cac.updateHistory),$scope.$on("users",cac.updateUsers),cac.initialize()}]),chatapp}(jQuery,angular);